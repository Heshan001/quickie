{"ast":null,"code":"var _jsxFileName = \"G:\\\\Quickie Project\\\\quickie\\\\src\\\\routes\\\\test.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\nfunction Test({\n  currentItems\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: currentItems && currentItems.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Item #\", item]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n}\n_c = Test;\nfunction PaginatedItems({\n  itemsPerPage\n}) {\n  _s();\n  // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n  const [itemOffset, setItemOffset] = useState(0);\n\n  // Simulate fetching items from another resources.\n  // (This could be items from props; or items loaded in a local state\n  // from an API endpoint with useEffect and useState)\n  const endOffset = itemOffset + itemsPerPage;\n  console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n  const currentItems = items.slice(itemOffset, endOffset);\n  const pageCount = Math.ceil(items.length / itemsPerPage);\n\n  // Invoke when user click to request another page.\n  const handlePageClick = event => {\n    const newOffset = event.selected * itemsPerPage % items.length;\n    console.log(`User requested page number ${event.selected}, which is offset ${newOffset}`);\n    setItemOffset(newOffset);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Items, {\n      currentItems: currentItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(ReactPaginate, {\n      breakLabel: \"...\",\n      nextLabel: \"next >\",\n      onPageChange: handlePageClick,\n      pageRangeDisplayed: 5,\n      pageCount: pageCount,\n      previousLabel: \"< previous\",\n      renderOnZeroPageCount: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true);\n}\n_s(PaginatedItems, \"T5lRYnT7FeIRYhFW34vLrQET4eA=\");\n_c2 = PaginatedItems;\nexport default Test;\nvar _c, _c2;\n$RefreshReg$(_c, \"Test\");\n$RefreshReg$(_c2, \"PaginatedItems\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","items","Test","currentItems","children","map","item","fileName","_jsxFileName","lineNumber","columnNumber","_c","PaginatedItems","itemsPerPage","_s","itemOffset","setItemOffset","useState","endOffset","console","log","slice","pageCount","Math","ceil","length","handlePageClick","event","newOffset","selected","Items","ReactPaginate","breakLabel","nextLabel","onPageChange","pageRangeDisplayed","previousLabel","renderOnZeroPageCount","_c2","$RefreshReg$"],"sources":["G:/Quickie Project/quickie/src/routes/test.jsx"],"sourcesContent":["import React from 'react'\r\n\r\n\r\n\r\n\r\nconst items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\r\n\r\nfunction Test({ currentItems }) {\r\n  return (\r\n    <>\r\n    {currentItems &&\r\n      currentItems.map((item) => (\r\n        <div>\r\n          <h3>Item #{item}</h3>\r\n        </div>\r\n      ))}\r\n  </>\r\n);\r\n}\r\n\r\nfunction PaginatedItems({ itemsPerPage }) {\r\n    // Here we use item offsets; we could also use page offsets\r\n    // following the API or data you're working with.\r\n    const [itemOffset, setItemOffset] = useState(0);\r\n  \r\n    // Simulate fetching items from another resources.\r\n    // (This could be items from props; or items loaded in a local state\r\n    // from an API endpoint with useEffect and useState)\r\n    const endOffset = itemOffset + itemsPerPage;\r\n    console.log(`Loading items from ${itemOffset} to ${endOffset}`);\r\n    const currentItems = items.slice(itemOffset, endOffset);\r\n    const pageCount = Math.ceil(items.length / itemsPerPage);\r\n  \r\n    // Invoke when user click to request another page.\r\n    const handlePageClick = (event) => {\r\n      const newOffset = (event.selected * itemsPerPage) % items.length;\r\n      console.log(\r\n        `User requested page number ${event.selected}, which is offset ${newOffset}`\r\n      );\r\n      setItemOffset(newOffset);\r\n    };\r\n\r\n    return (\r\n        <>\r\n          <Items currentItems={currentItems} />\r\n          <ReactPaginate\r\n            breakLabel=\"...\"\r\n            nextLabel=\"next >\"\r\n            onPageChange={handlePageClick}\r\n            pageRangeDisplayed={5}\r\n            pageCount={pageCount}\r\n            previousLabel=\"< previous\"\r\n            renderOnZeroPageCount={null}\r\n          />\r\n        </>\r\n      );\r\n    }\r\n\r\n\r\nexport default Test"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAKzB,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;AAE7D,SAASC,IAAIA,CAAC;EAAEC;AAAa,CAAC,EAAE;EAC9B,oBACEL,OAAA,CAAAE,SAAA;IAAAI,QAAA,EACCD,YAAY,IACXA,YAAY,CAACE,GAAG,CAAEC,IAAI,iBACpBR,OAAA;MAAAM,QAAA,eACEN,OAAA;QAAAM,QAAA,GAAI,QAAM,EAACE,IAAI;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB,CACN;EAAC,gBACJ,CAAC;AAEL;AAACC,EAAA,GAXQT,IAAI;AAab,SAASU,cAAcA,CAAC;EAAEC;AAAa,CAAC,EAAE;EAAAC,EAAA;EACtC;EACA;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGC,QAAQ,CAAC,CAAC,CAAC;;EAE/C;EACA;EACA;EACA,MAAMC,SAAS,GAAGH,UAAU,GAAGF,YAAY;EAC3CM,OAAO,CAACC,GAAG,CAAE,sBAAqBL,UAAW,OAAMG,SAAU,EAAC,CAAC;EAC/D,MAAMf,YAAY,GAAGF,KAAK,CAACoB,KAAK,CAACN,UAAU,EAAEG,SAAS,CAAC;EACvD,MAAMI,SAAS,GAAGC,IAAI,CAACC,IAAI,CAACvB,KAAK,CAACwB,MAAM,GAAGZ,YAAY,CAAC;;EAExD;EACA,MAAMa,eAAe,GAAIC,KAAK,IAAK;IACjC,MAAMC,SAAS,GAAID,KAAK,CAACE,QAAQ,GAAGhB,YAAY,GAAIZ,KAAK,CAACwB,MAAM;IAChEN,OAAO,CAACC,GAAG,CACR,8BAA6BO,KAAK,CAACE,QAAS,qBAAoBD,SAAU,EAC7E,CAAC;IACDZ,aAAa,CAACY,SAAS,CAAC;EAC1B,CAAC;EAED,oBACI9B,OAAA,CAAAE,SAAA;IAAAI,QAAA,gBACEN,OAAA,CAACgC,KAAK;MAAC3B,YAAY,EAAEA;IAAa;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrCZ,OAAA,CAACiC,aAAa;MACZC,UAAU,EAAC,KAAK;MAChBC,SAAS,EAAC,QAAQ;MAClBC,YAAY,EAAER,eAAgB;MAC9BS,kBAAkB,EAAE,CAAE;MACtBb,SAAS,EAAEA,SAAU;MACrBc,aAAa,EAAC,YAAY;MAC1BC,qBAAqB,EAAE;IAAK;MAAA9B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC;EAAA,eACF,CAAC;AAEP;AAACI,EAAA,CApCIF,cAAc;AAAA0B,GAAA,GAAd1B,cAAc;AAuCvB,eAAeV,IAAI;AAAA,IAAAS,EAAA,EAAA2B,GAAA;AAAAC,YAAA,CAAA5B,EAAA;AAAA4B,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}