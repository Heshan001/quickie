{"ast":null,"code":"var _jsxFileName = \"G:\\\\Quickie Project\\\\quickie\\\\src\\\\routes\\\\test.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactPaginate from 'react-paginate';\n\n// Example items, to simulate fetching from another resources.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\nfunction Items({\n  currentItems\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: currentItems && currentItems.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Item #\", item]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 11\n    }, this))\n  }, void 0, false);\n}\n_c = Items;\nfunction Test({\n  itemsPerPage\n}) {\n  _s();\n  // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n  const [itemOffset, setItemOffset] = useState(0);\n\n  // Simulate fetching items from another resources.\n  // (This could be items from props; or items loaded in a local state\n  // from an API endpoint with useEffect and useState)\n  const endOffset = itemOffset + itemsPerPage;\n  console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n  const currentItems = items.slice(itemOffset, endOffset);\n  const pageCount = Math.ceil(items.length / itemsPerPage);\n\n  // Invoke when user click to request another page.\n  const handlePageClick = event => {\n    const newOffset = event.selected * itemsPerPage % items.length;\n    console.log(`User requested page number ${event.selected}, which is offset ${newOffset}`);\n    setItemOffset(newOffset);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Items, {\n      currentItems: currentItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactPaginate, {\n      breakLabel: \"...\",\n      nextLabel: \"next >\",\n      onPageChange: handlePageClick,\n      pageRangeDisplayed: 5,\n      pageCount: pageCount,\n      previousLabel: \"< previous\",\n      renderOnZeroPageCount: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n// Add a <div id=\"container\"> to your HTML to see the component rendered.\n_s(Test, \"T5lRYnT7FeIRYhFW34vLrQET4eA=\");\n_c2 = Test;\nReactDOM.render( /*#__PURE__*/_jsxDEV(PaginatedItems, {\n  itemsPerPage: 4\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 61,\n  columnNumber: 3\n}, this), document.getElementById('container'));\nvar _c, _c2;\n$RefreshReg$(_c, \"Items\");\n$RefreshReg$(_c2, \"Test\");","map":{"version":3,"names":["React","useEffect","useState","ReactDOM","ReactPaginate","jsxDEV","_jsxDEV","Fragment","_Fragment","items","Items","currentItems","children","map","item","fileName","_jsxFileName","lineNumber","columnNumber","_c","Test","itemsPerPage","_s","itemOffset","setItemOffset","endOffset","console","log","slice","pageCount","Math","ceil","length","handlePageClick","event","newOffset","selected","breakLabel","nextLabel","onPageChange","pageRangeDisplayed","previousLabel","renderOnZeroPageCount","_c2","render","PaginatedItems","document","getElementById","$RefreshReg$"],"sources":["G:/Quickie Project/quickie/src/routes/test.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport ReactPaginate from 'react-paginate';\r\n\r\n// Example items, to simulate fetching from another resources.\r\nconst items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\r\n\r\nfunction Items({ currentItems }) {\r\n  return (\r\n    <>\r\n      {currentItems &&\r\n        currentItems.map((item) => (\r\n          <div>\r\n            <h3>Item #{item}</h3>\r\n          </div>\r\n        ))}\r\n    </>\r\n  );\r\n}\r\n\r\nfunction Test({ itemsPerPage }) {\r\n  // Here we use item offsets; we could also use page offsets\r\n  // following the API or data you're working with.\r\n  const [itemOffset, setItemOffset] = useState(0);\r\n\r\n  // Simulate fetching items from another resources.\r\n  // (This could be items from props; or items loaded in a local state\r\n  // from an API endpoint with useEffect and useState)\r\n  const endOffset = itemOffset + itemsPerPage;\r\n  console.log(`Loading items from ${itemOffset} to ${endOffset}`);\r\n  const currentItems = items.slice(itemOffset, endOffset);\r\n  const pageCount = Math.ceil(items.length / itemsPerPage);\r\n\r\n  // Invoke when user click to request another page.\r\n  const handlePageClick = (event) => {\r\n    const newOffset = (event.selected * itemsPerPage) % items.length;\r\n    console.log(\r\n      `User requested page number ${event.selected}, which is offset ${newOffset}`\r\n    );\r\n    setItemOffset(newOffset);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Items currentItems={currentItems} />\r\n      <ReactPaginate\r\n        breakLabel=\"...\"\r\n        nextLabel=\"next >\"\r\n        onPageChange={handlePageClick}\r\n        pageRangeDisplayed={5}\r\n        pageCount={pageCount}\r\n        previousLabel=\"< previous\"\r\n        renderOnZeroPageCount={null}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n// Add a <div id=\"container\"> to your HTML to see the component rendered.\r\nReactDOM.render(\r\n  <PaginatedItems itemsPerPage={4} />,\r\n  document.getElementById('container')\r\n);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}